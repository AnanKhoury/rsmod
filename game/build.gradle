plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id 'org.jetbrains.dokka' version '0.9.18'
}

apply plugin: 'application'

description = 'RSMod Game'
mainClassName = 'gg.rsmod.game.Launcher'

run {
    workingDir = rootProject.projectDir
}

dependencies {
    compile project(':util')
    compile project(':net')

    runtimeClasspath project(":game:plugins")

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-scripting-common', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-script-runtime', version: kotlinVersion
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kcoroutineVersion"

    compile group: 'org.reflections', name: 'reflections', version: reflectionsVersion
    compile group: 'commons-io', name: 'commons-io', version: commonsIoVersion

    compile group: 'io.github.classgraph', name: 'classgraph', version: classGraphVersion
    compile group: 'it.unimi.dsi', name: 'fastutil', version: fastUtilVersion

    implementation group: 'org.mindrot', name: 'jbcrypt', version: bcryptVersion
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: bouncycastleVersion

    testImplementation group: 'junit', name: 'junit', version: junitVersion
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
}

tasks.register("install") {
    description = 'Install RSMod'

    doLast {

        copy {
            into "${rootProject.projectDir}/"

            from "${rootProject.projectDir}/game.example.yml"
            rename 'game.example.yml', 'game.yml'

            from "${rootProject.projectDir}/dev-settings.example.yml"
            rename 'dev-settings.example.yml', 'dev-settings.yml'

            file("${rootProject.projectDir}/first-launch").createNewFile()
        }

        javaexec {
            workingDir = rootProject.projectDir
            classpath = sourceSets.main.runtimeClasspath
            main = "gg.rsmod.game.service.rsa.RsaService"
            args = [ "16", "2048", "./data/rsa/key.pem" ] // radix, bitcount, rsa pem file
        }
    }
}

task extractDependencies(type: Copy) {
    from(zipTree("build/distributions/game-${project.version}.zip")) {
        include "game-${project.version}/lib/*"
        eachFile {
            path = name
        }
        includeEmptyDirs = false
    }
    into 'build/deps'
}

applicationDistribution.from("$rootDir/data/") {
    into 'bin/data/'
    include '**'
    exclude 'saves/*'
}

applicationDistribution.from("$rootDir") {
    into 'bin'

    include 'plugins/*'

    include 'game.example.yml'
    rename 'game.example.yml', 'game.yml'
}

shadowDistZip {
    from("$rootDir/data/") {
        into "game-shadow-${project.version}/bin/data/"
        include '**'
        exclude 'saves/*'
    }

    from("$rootDir") {
        into "game-shadow-${project.version}/bin/"
        include 'plugins/*'
        include 'game.example.yml'
        rename 'game.example.yml', 'game.yml'
    }
}

shadowDistTar {
    from("$rootDir/data/") {
        into "game-shadow-${project.version}/bin/data/"
        include '**'
        exclude 'saves/*'
    }

    from("$rootDir") {
        into "game-shadow-${project.version}/bin/"
        include 'plugins/*'
        include 'game.example.yml'
        rename 'game.example.yml', 'game.yml'
    }
}

build.finalizedBy extractDependencies
install.dependsOn build